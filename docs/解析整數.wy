吾嘗觀「「腳本秘術」」之書。

注曰「「 Adapted to wenyan-lang from https://github.com/kong0107/chinese-parseint 」」。

吾有一物。名之曰「中文數字」。
昔之「中文數字」之「「０」」者。今零是矣。
昔之「中文數字」之「「零」」者。今零是矣。
昔之「中文數字」之「「○」」者。今零是矣。
昔之「中文數字」之「「〇」」者。今零是矣。
昔之「中文數字」之「「洞」」者。今零是矣。
昔之「中文數字」之「「１」」者。今一是矣。
昔之「中文數字」之「「一」」者。今一是矣。
昔之「中文數字」之「「壹」」者。今一是矣。
昔之「中文數字」之「「ㄧ」」者。今一是矣。
昔之「中文數字」之「「弌」」者。今一是矣。
昔之「中文數字」之「「么」」者。今一是矣。
昔之「中文數字」之「「２」」者。今二是矣。
昔之「中文數字」之「「二」」者。今二是矣。
昔之「中文數字」之「「貳」」者。今二是矣。
昔之「中文數字」之「「贰」」者。今二是矣。
昔之「中文數字」之「「弍」」者。今二是矣。
昔之「中文數字」之「「兩」」者。今二是矣。
昔之「中文數字」之「「两」」者。今二是矣。
昔之「中文數字」之「「３」」者。今三是矣。
昔之「中文數字」之「「三」」者。今三是矣。
昔之「中文數字」之「「參」」者。今三是矣。
昔之「中文數字」之「「叁」」者。今三是矣。
昔之「中文數字」之「「弎」」者。今三是矣。
昔之「中文數字」之「「参」」者。今三是矣。
昔之「中文數字」之「「叄」」者。今三是矣。
昔之「中文數字」之「「４」」者。今四是矣。
昔之「中文數字」之「「四」」者。今四是矣。
昔之「中文數字」之「「肆」」者。今四是矣。
昔之「中文數字」之「「䦉」」者。今四是矣。
昔之「中文數字」之「「刀」」者。今四是矣。
昔之「中文數字」之「「５」」者。今五是矣。
昔之「中文數字」之「「五」」者。今五是矣。
昔之「中文數字」之「「伍」」者。今五是矣。
昔之「中文數字」之「「６」」者。今六是矣。
昔之「中文數字」之「「六」」者。今六是矣。
昔之「中文數字」之「「陸」」者。今六是矣。
昔之「中文數字」之「「陆」」者。今六是矣。
昔之「中文數字」之「「７」」者。今七是矣。
昔之「中文數字」之「「七」」者。今七是矣。
昔之「中文數字」之「「柒」」者。今七是矣。
昔之「中文數字」之「「拐」」者。今七是矣。
昔之「中文數字」之「「８」」者。今八是矣。
昔之「中文數字」之「「八」」者。今八是矣。
昔之「中文數字」之「「捌」」者。今八是矣。
昔之「中文數字」之「「杯」」者。今八是矣。
昔之「中文數字」之「「９」」者。今九是矣。
昔之「中文數字」之「「九」」者。今九是矣。
昔之「中文數字」之「「玖」」者。今九是矣。
昔之「中文數字」之「「勾」」者。今九是矣。
昔之「中文數字」之「「十」」者。今一十是矣。
昔之「中文數字」之「「拾」」者。今一十是矣。
昔之「中文數字」之「「什」」者。今一十是矣。
昔之「中文數字」之「「呀」」者。今一十是矣。
昔之「中文數字」之「「百」」者。今一百是矣。
昔之「中文數字」之「「佰」」者。今一百是矣。
昔之「中文數字」之「「千」」者。今一千是矣。
昔之「中文數字」之「「仟」」者。今一千是矣。
昔之「中文數字」之「「念」」者。今二十是矣。
昔之「中文數字」之「「廿」」者。今二十是矣。
昔之「中文數字」之「「卅」」者。今三十是矣。
昔之「中文數字」之「「卌」」者。今四十是矣。
昔之「中文數字」之「「皕」」者。今二百是矣。
昔之「中文數字」之「「萬」」者。今一萬是矣。
昔之「中文數字」之「「万」」者。今一萬是矣。
昔之「中文數字」之「「億」」者。今一億是矣。
昔之「中文數字」之「「亿」」者。今一億是矣。
昔之「中文數字」之「「兆」」者。今一兆是矣。
昔之「中文數字」之「「京」」者。今一京是矣。
昔之「中文數字」之「「經」」者。今一京是矣。
昔之「中文數字」之「「经」」者。今一京是矣。
昔之「中文數字」之「「垓」」者。今一垓是矣。
昔之「中文數字」之「「秭」」者。今一秭是矣。
昔之「中文數字」之「「杼」」者。今一秭是矣。
昔之「中文數字」之「「穰」」者。今一穣是矣。
昔之「中文數字」之「「壤」」者。今一穣是矣。
昔之「中文數字」之「「溝」」者。今一溝是矣。
昔之「中文數字」之「「沟」」者。今一溝是矣。
昔之「中文數字」之「「澗」」者。今一澗是矣。
昔之「中文數字」之「「涧」」者。今一澗是矣。
昔之「中文數字」之「「正」」者。今一正是矣。
昔之「中文數字」之「「載」」者。今一載是矣。
昔之「中文數字」之「「極」」者。今一極是矣。

爪哇國有腳本
var zh_parseInt = neg1 => neg2 => chars => str => {
	var radix = null;

	var result = parseInt(str, radix);
	if(!isNaN(result)) return result;
	if(typeof str !== "string") return NaN;

	str = str.replace(/[\s　]+/g, "");
	var negative = (str && (str.length > 1)) && ((str[0] == "-") || (str[0] == neg1) || (str[0] == neg2));
	if(negative) str = str.substr(1);

	result = 0;
	var partialSum = 0;
	var digit = -1;

	for(var i = 0; i < str.length; ++i) {
		var charVal = chars[str.charAt(i)];
		if(charVal === undefined) return NaN;
		if(charVal < 10) {
			digit = (digit == -1)
				? charVal
				: digit * 10 + charVal
			;
		}
		else if(charVal < 1e+4) {
			if(digit == -1) digit = 1;
			if(i > 1 && digit == 0 && chars[str.charAt(i-2)] != 100)
				digit = 1;
			partialSum += digit * charVal;
			digit = -1;
		}
		else {
			if(digit != -1) partialSum += digit;
			if(i && chars[str.charAt(i-1)] >= 1e+4)
				result *= chars[str.charAt(i)];
			else result += partialSum * charVal;
			partialSum = 0;
			digit = -1;
		}
	}
	if(digit > 0) {
		if(str.length > 1) {
			charVal = chars[str.charAt(str.length - 2)];
			if(charVal < 100) partialSum += digit;
			else {
				charVal /= charVal.toString().charAt(0);
				partialSum += digit * (charVal / 10);
			}
		}
		else partialSum += digit;
	}
	result += partialSum;

	if(negative) result *= -1;
	return result;
};
其文如是矣。

今有一術。名之曰「解析整數」。
欲行是術。
必先得一言。曰「輸入言」。
乃行是術曰。
施「zh_parseInt」。
於「「負」」於「「负」」於「中文數字」於「輸入言」。名之曰「言」。乃得「言」。
是謂「解析整數」之術也。